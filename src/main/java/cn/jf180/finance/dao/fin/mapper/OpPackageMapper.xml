<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.jf180.finance.dao.fin.dao.OpPackageMapper">
  <resultMap id="BaseResultMap" type="cn.jf180.finance.dao.fin.model.OpPackage">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="monthly_fee" jdbcType="INTEGER" property="monthlyFee" />
    <result column="return_fee" jdbcType="INTEGER" property="returnFee" />
    <result column="contract_period" jdbcType="VARCHAR" property="contractPeriod" />
    <result column="package_name" jdbcType="VARCHAR" property="packageName" />
    <result column="package_detail" jdbcType="VARCHAR" property="packageDetail" />
    <result column="domestic_flow" jdbcType="VARCHAR" property="domesticFlow" />
    <result column="domestic_time" jdbcType="INTEGER" property="domesticTime" />
    <result column="provincial_flow" jdbcType="VARCHAR" property="provincialFlow" />
    <result column="provincial_time" jdbcType="INTEGER" property="provincialTime" />
    <result column="op_type" jdbcType="INTEGER" property="opType" />
    <result column="status" jdbcType="INTEGER" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, monthly_fee, return_fee, contract_period, package_name, package_detail, domestic_flow, 
    domestic_time, provincial_flow, provincial_time, op_type, status
  </sql>
  <select id="selectByExample" parameterType="cn.jf180.finance.dao.fin.model.OpPackageExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from op_package
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from op_package
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from op_package
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="cn.jf180.finance.dao.fin.model.OpPackageExample">
    delete from op_package
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.jf180.finance.dao.fin.model.OpPackage">
    insert into op_package (id, monthly_fee, return_fee, 
      contract_period, package_name, package_detail, 
      domestic_flow, domestic_time, provincial_flow, 
      provincial_time, op_type, status
      )
    values (#{id,jdbcType=VARCHAR}, #{monthlyFee,jdbcType=INTEGER}, #{returnFee,jdbcType=INTEGER}, 
      #{contractPeriod,jdbcType=VARCHAR}, #{packageName,jdbcType=VARCHAR}, #{packageDetail,jdbcType=VARCHAR}, 
      #{domesticFlow,jdbcType=VARCHAR}, #{domesticTime,jdbcType=INTEGER}, #{provincialFlow,jdbcType=VARCHAR}, 
      #{provincialTime,jdbcType=INTEGER}, #{opType,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="cn.jf180.finance.dao.fin.model.OpPackage">
    insert into op_package
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="monthlyFee != null">
        monthly_fee,
      </if>
      <if test="returnFee != null">
        return_fee,
      </if>
      <if test="contractPeriod != null">
        contract_period,
      </if>
      <if test="packageName != null">
        package_name,
      </if>
      <if test="packageDetail != null">
        package_detail,
      </if>
      <if test="domesticFlow != null">
        domestic_flow,
      </if>
      <if test="domesticTime != null">
        domestic_time,
      </if>
      <if test="provincialFlow != null">
        provincial_flow,
      </if>
      <if test="provincialTime != null">
        provincial_time,
      </if>
      <if test="opType != null">
        op_type,
      </if>
      <if test="status != null">
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="monthlyFee != null">
        #{monthlyFee,jdbcType=INTEGER},
      </if>
      <if test="returnFee != null">
        #{returnFee,jdbcType=INTEGER},
      </if>
      <if test="contractPeriod != null">
        #{contractPeriod,jdbcType=VARCHAR},
      </if>
      <if test="packageName != null">
        #{packageName,jdbcType=VARCHAR},
      </if>
      <if test="packageDetail != null">
        #{packageDetail,jdbcType=VARCHAR},
      </if>
      <if test="domesticFlow != null">
        #{domesticFlow,jdbcType=VARCHAR},
      </if>
      <if test="domesticTime != null">
        #{domesticTime,jdbcType=INTEGER},
      </if>
      <if test="provincialFlow != null">
        #{provincialFlow,jdbcType=VARCHAR},
      </if>
      <if test="provincialTime != null">
        #{provincialTime,jdbcType=INTEGER},
      </if>
      <if test="opType != null">
        #{opType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.jf180.finance.dao.fin.model.OpPackageExample" resultType="java.lang.Long">
    select count(*) from op_package
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update op_package
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=VARCHAR},
      </if>
      <if test="record.monthlyFee != null">
        monthly_fee = #{record.monthlyFee,jdbcType=INTEGER},
      </if>
      <if test="record.returnFee != null">
        return_fee = #{record.returnFee,jdbcType=INTEGER},
      </if>
      <if test="record.contractPeriod != null">
        contract_period = #{record.contractPeriod,jdbcType=VARCHAR},
      </if>
      <if test="record.packageName != null">
        package_name = #{record.packageName,jdbcType=VARCHAR},
      </if>
      <if test="record.packageDetail != null">
        package_detail = #{record.packageDetail,jdbcType=VARCHAR},
      </if>
      <if test="record.domesticFlow != null">
        domestic_flow = #{record.domesticFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.domesticTime != null">
        domestic_time = #{record.domesticTime,jdbcType=INTEGER},
      </if>
      <if test="record.provincialFlow != null">
        provincial_flow = #{record.provincialFlow,jdbcType=VARCHAR},
      </if>
      <if test="record.provincialTime != null">
        provincial_time = #{record.provincialTime,jdbcType=INTEGER},
      </if>
      <if test="record.opType != null">
        op_type = #{record.opType,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update op_package
    set id = #{record.id,jdbcType=VARCHAR},
      monthly_fee = #{record.monthlyFee,jdbcType=INTEGER},
      return_fee = #{record.returnFee,jdbcType=INTEGER},
      contract_period = #{record.contractPeriod,jdbcType=VARCHAR},
      package_name = #{record.packageName,jdbcType=VARCHAR},
      package_detail = #{record.packageDetail,jdbcType=VARCHAR},
      domestic_flow = #{record.domesticFlow,jdbcType=VARCHAR},
      domestic_time = #{record.domesticTime,jdbcType=INTEGER},
      provincial_flow = #{record.provincialFlow,jdbcType=VARCHAR},
      provincial_time = #{record.provincialTime,jdbcType=INTEGER},
      op_type = #{record.opType,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.jf180.finance.dao.fin.model.OpPackage">
    update op_package
    <set>
      <if test="monthlyFee != null">
        monthly_fee = #{monthlyFee,jdbcType=INTEGER},
      </if>
      <if test="returnFee != null">
        return_fee = #{returnFee,jdbcType=INTEGER},
      </if>
      <if test="contractPeriod != null">
        contract_period = #{contractPeriod,jdbcType=VARCHAR},
      </if>
      <if test="packageName != null">
        package_name = #{packageName,jdbcType=VARCHAR},
      </if>
      <if test="packageDetail != null">
        package_detail = #{packageDetail,jdbcType=VARCHAR},
      </if>
      <if test="domesticFlow != null">
        domestic_flow = #{domesticFlow,jdbcType=VARCHAR},
      </if>
      <if test="domesticTime != null">
        domestic_time = #{domesticTime,jdbcType=INTEGER},
      </if>
      <if test="provincialFlow != null">
        provincial_flow = #{provincialFlow,jdbcType=VARCHAR},
      </if>
      <if test="provincialTime != null">
        provincial_time = #{provincialTime,jdbcType=INTEGER},
      </if>
      <if test="opType != null">
        op_type = #{opType,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.jf180.finance.dao.fin.model.OpPackage">
    update op_package
    set monthly_fee = #{monthlyFee,jdbcType=INTEGER},
      return_fee = #{returnFee,jdbcType=INTEGER},
      contract_period = #{contractPeriod,jdbcType=VARCHAR},
      package_name = #{packageName,jdbcType=VARCHAR},
      package_detail = #{packageDetail,jdbcType=VARCHAR},
      domestic_flow = #{domesticFlow,jdbcType=VARCHAR},
      domestic_time = #{domesticTime,jdbcType=INTEGER},
      provincial_flow = #{provincialFlow,jdbcType=VARCHAR},
      provincial_time = #{provincialTime,jdbcType=INTEGER},
      op_type = #{opType,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>